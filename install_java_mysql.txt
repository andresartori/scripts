# Edit conf/web.xml


<servlet>
  <servlet-name>default</servlet-name>
  <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
  <init-param>
    <param-name>debug</param-name>
    <param-value>0</param-value>
  </init-param>
  <init-param>
    <param-name>listings</param-name>
    <param-value>true</param-value>
  </init-param>
  <load-on-startup>1</load-on-startup>
</servlet>

# Create structure
cd webapps && mkdir app app/WEB-INF app/WEB-INF/classes && touch app/register.html
Create the main HomePage, add this in home.html

<html>
<head>
  <title>Register</title>
</head>
<body>
  <h2>Register</h2>
  <form method="get" action="http://localhost:8080/app/query">
    <b>Choose an author:</b>
    <input type="checkbox" name="author" value="Tan Ah Teck">Ah Teck
    <input type="checkbox" name="author" value="Mohammad Ali">Ali
    <input type="checkbox" name="author" value="Kumar">Kumar
    <input type="submit" value="Search">
  </form>
</body>
</html>


touch app/WEB-INF/classes/HelloServlet.java

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
 
@WebServlet("/register")
public class HelloServlet extends HttpServlet {
   @Override
   public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
 
      out.println("<html>");
      out.println("<head><title>Hello, World</title></head>");
      out.println("<body>");
      out.println("<h1>Hello, world!</h1>");  // says Hello
      // Echo client's request information
      out.println("<p>Request URI: " + request.getRequestURI() + "</p>");
      out.println("<p>Protocol: " + request.getProtocol() + "</p>");
      out.println("<p>PathInfo: " + request.getPathInfo() + "</p>");
      out.println("<p>Remote Address: " + request.getRemoteAddr() + "</p>");
      // Generate a random number upon each request
      out.println("<p>A Random Number: <strong>" + Math.random() + "</strong></p>");
      out.println("</body></html>");
      out.close();  // Always close the output writer
   }
}
2. Compiling the file, make sure that your terminal directory right now is in classes/ folder:

> Users/calvinqc/myProject/webapps/app/WEB-INF/classes
$ javac -cp ../../../../lib/servlet-api.jar HelloServlet.java

3. Restart your Tomcat Server
4. Open browser localhost:8080/app/sayhello

MySQL
Install MySQL 8.0.19-community on your computer.
Open System Preferences > MySQL > Make sure it’s started

Open a new terminal, and name the session as mysql:
Start MySQL: $ mysql -u root -p, and enter the password when you first created
Note: If you already have MySQL on your computer, but it’s too buggy or you enter the wrong password and want to re-install MySQL. Check out this post here on how to remove MySQL

Your IntelliJ will look similar to this so far:


3. Copy these MySQL statements into MySQL terminal. This will create the database and a sample schema with values. You can always feel free to create your own database and schema based on your choice.

create database if not exists Bank;
use Bank;
drop table if exists user;
create table user (
   id     int,
   email  varchar(225),
   password varchar(225),
   primary key (id));
insert into books values (1001, 'Java for dummies', 'Tan Ah Teck', 11.11, 11);
insert into books values (1002, 'More Java for dummies', 'Tan Ah Teck', 22.22, 22);
insert into books values (1003, 'More Java for more dummies', 'Mohammad Ali', 33.33, 33);
insert into books values (1004, 'A Cup of Java', 'Kumar', 55.55, 55);
insert into books values (1005, 'A Teaspoon of Java', 'Kevin Jones', 66.66, 66);
select * from books;

Result after you insert these into your database
MySQL JDBC Driver
Install MySQL JDBC Driver
Unzip it > Copy the file mysql-connector-java-8.0.19.jar > Paste it into the folder myProject/lib
Connect Get/ Api with MySQL Database
Create 2 files: $ touch webapps/app/querybook.html webapps/app/WEB-INF/classes/QueryServlet.java
Add this HTML in the querybook.html:
<html>
<head>
  <title>Yet Another Bookshop</title>
</head>
<body>
  <h2>Yet Another Bookshop</h2>
  <form method="post" action="http://localhost:8080/app/register">
    <b>Choose an author:</b>
    <input type="checkbox" name="author" value="Tan Ah Teck">Ah Teck
    <input type="checkbox" name="author" value="Mohammad Ali">Ali
    <input type="checkbox" name="author" value="Kumar">Kumar
    <input type="submit" value="Search">
  </form>
</body>
</html>
2. Open browser: http://localhost:9999/app/querybook.html

3. Add this in queryServlet.java file, and replace myuser with your username, in my case is “root” and my password is ‘password’

import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
@WebServlet("/query")   // Configure the request URL for this servlet (Tomcat 7/Servlet 3.0 upwards)
public class QueryServlet extends HttpServlet {
   // The doGet() runs once per HTTP GET request to this servlet.
   @Override
   public void doGet(HttpServletRequest request, HttpServletResponse response)
               throws ServletException, IOException {
      // Set the MIME type for the response message
      response.setContentType("text/html");
      // Get a output writer to write the response message into the network socket
      PrintWriter out = response.getWriter();
      // Print an HTML page as the output of the query
      out.println("<html>");
      out.println("<head><title>Query Response</title></head>");
      out.println("<body>");
      try (
         // Step 1: Allocate a database 'Connection' object
         Connection conn = DriverManager.getConnection(
               "jdbc:mysql://localhost:3306/ebookshop?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC",
               "root", "password");   // For MySQL
               // The format is: "jdbc:mysql://hostname:port/databaseName", "username", "password"
         // Step 2: Allocate a 'Statement' object in the Connection
         Statement stmt = conn.createStatement();
      ) {
         // Step 3: Execute a SQL SELECT query
         String sqlStr = "select * from books where author = "
               + "'" + request.getParameter("author") + "'"   // Single-quote SQL string
               + " and qty > 0 order by price desc";
         out.println("<h3>Thank you for your query.</h3>");
         out.println("<p>Your SQL statement is: " + sqlStr + "</p>"); // Echo for debugging
         ResultSet rset = stmt.executeQuery(sqlStr);  // Send the query to the server
         // Step 4: Process the query result set
         int count = 0;
         while(rset.next()) {
            // Print a paragraph <p>...</p> for each record
            out.println("<p>" + rset.getString("author")
                  + ", " + rset.getString("title")
                  + ", $" + rset.getDouble("price") + "</p>");
            count++;
         }
         out.println("<p>==== " + count + " records found =====</p>");
      } catch(Exception ex) {
         out.println("<p>Error: " + ex.getMessage() + "</p>");
         out.println("<p>Check Tomcat console for details.</p>");
         ex.printStackTrace();
      }  // Step 5: Close conn and stmt - Done automatically by try-with-resources (JDK 7)
 
      out.println("</body></html>");
      out.close();
   }
}
4. Then, compile the file:

> Users/calvinqc/myProject/webapps/app/WEB-INF/classes
$ javac -cp ../../../../lib/servlet-api.jar QueryServlet.java
5. Open Browser: localhost:8080/app/querybook.html

6. Play around with the author selection > Click Search



Congratulation
You have learned to build a simple Java Web application with MySQL using Tomcat and JSP.


create table books (
	id	int,
	title	varchar(50),
	author	varchar(50),
	price	float,
	qty		int,
	primary key (id));
	
	
	
create table user (
   id     int,
   email  varchar(225),
   password varchar(225),
   primary key (id));
   
   
JwV0u34,-<LFv8wDdcc?F_w4ht@~`;]m
